#!/usr/bin/env bash

  # After call to 'umbrella_bootstrap' this array contains following predefined values.
  #
  ## "${globals[$G_ROOT_DIR]}" [cwRoot]             - file system path to root repository
  ## "${globals[$G_MODULES_FN]}" [cwTmpSubmodules]  - temporary file name, which listed all current repositories
  #                                                   with additional information
  ## "${globals[$G_MODULE_GIT_DIR]}" [gitDir]       - current repository
  #

## Global arrays for quick access of frequently used parameters
## There are basically a cache
g_module_name=()
g_relative_paths=()
g_git_dirs=()
g_full_paths=()
g_module_paths=()
g_module_inited=()
g_module_shas=()
g_module_managed=()
g_managed_refnames=()

declare -a g_lego_aware_tokens_gitmodules=("branch" "pinned" "sha")

declare -a g_lego_modes=("solo" "versioned")
G_MODE_MASK_SOLO="0x1"
G_MODE_MASK_VERSIONED="0x2"

declare NA="n/a"

# keeps some global settings during git-lego script execution
# initialized at startup
globals=()
  ################################## CONSTANTS FOR globals array ##########################################
  #
  ## Root repo path
  #
G_ROOT_DIR=0
  #
  ## reference to git directory for current submodule.
  #
G_MODULE_GIT_DIR=1
  #
  ## Human-readable name of root repository path
  #
G_ROOT_NAME=2
  #
  ## Temporary folder owned by script invocation
G_SCRIPT_TMP_DIRECTORY=3
  #
  ## Reference to temporary file which keeps all submodules' path in reversed order
  ##  It is useful to apply regular actions against all modules, like bulk commit,push,etc
  #
G_MODULES_FN=4
  #
  ## Reference to temporary file which keeps modules' paths, which are effectively affected by
  # applying bulk operations such pull, commit, etc
  # They are in 'absolute' module structure form like /, or /macosx/docs
  #
G_AFFECTED_MODULES=5

  # Remote reference used in git-lego. By default, of course, 'origin'
G_LEGO_REMOTE=6


#################### CONSTANTS for MODULE STATUS (see function module_porcelain_status() ####################
#
MS_BRANCH_INFO=0   # String
MS_UNTRACKED=1     # N
MS_MODIFIED=2      # M
MS_MODIFIED_SUBMODULE=28 #S
MS_DELETED=3       # D
MS_ADDED=4         # A
MS_RENAMED=5       # R
MS_COPIED=6        # C
MS_UNMERGED=7      # U
MS_PUSHABLE=8      # 1/0
MS_PULLABLE=9      # 1/0
MS_COMMITABLE=10   # 1/0
MS_SUBMODULES=11   # S
#
# After clone/update submodules always are in the *detached* state. That means, no symbolic reference points to inner module's HEAD.
# At the same time, outer module can have (or not) is't own expectation, which inner module should have, branch or tag.
# If outer module specifies the hint, *managed link*, branch or tag or just sha1 for inner module, let we say the inner module is "managed".
# Otherwise the inner module is *unmanaged* by outer module.
#
# If module is managed, but points to other sha1, than expected, the module's state is *mismatched*.
# Git-lego warns, if inner module is unmanaged or mismatched, and enumerates, to which symbolic links the inner module can be *attained*.
#
# Attain process means change hint in the scope of outer module, so that inner can match to the inner module state. Worktree of inner module is not changed,
# but worktree of outer module can be changed, if git-lego mode is *versioned*. If git-lego mode is set to *solo*, no worktree changes happens as well.
#
# Git-lego has an *auto-attain* setting, in which allow it can attains unmanaged or mismatched modules if no ambiguous symbolic links the inner module has.
#
# In case of mismatched state, there are possible either "attain" inner to outer, or update inner module to the state, referenced in outer hint.
# There are situation though, if outer hint is stale, and inner branch has no such ref. Let say the inner module is not *updateable*
# In this case only attaining will be advised
#
# Module is not initialized yet or git submodule deinit was applied
MS_UNINITIALIZED=14   # 1/0
#
# Unmanaged mean, git-lego has no idea what inner module should be stick on.
MS_UNMANAGED=15       # 1 - inner module is unmanaged, 0 - managed
#
# In case the module is managed
# 0 - inner module not detached (attached to any refs/heads/branch), 1 is detached to tag, 2 is detached to bare sha1
MS_DETACHED=16
#
# Hint of outer
# 0 - managed with a branch head, 1 - pinned to tag, 2 - pinned to bare sha1
MS_MANAGED=17
#
# 0 - Inner module both outer hint and inner state are matched (branch -> branch or tag -> tag), but references are different
# ie, hint is branch develop, but inner state is master. In this case either git-lego update or git-lego attain are required
#
MS_MISMATCHED=18
#
# In case the module has managed, but mismatched state, whether or not it is updateable, to be syncronized with outer hint.
# Does not matter as branch or tag or ever sha1 situation.
MS_UPDATEABLE=19
#
# Outer module hint for inner one, symbolic reference (tag or branch) or just bare sha1, the inner module expected to be.
MS_MANAGED_REFNAME=20
#
# One or more branches referencing on the inner:HEAD, which can be synchronized to the branch after attaining without getting outer repo dirty
# strings' array
MS_GUESSED_BRANCHES=22

# One or more tags referencing to the inner module:HEAD, which can be synchronized with outer hint without making outer submodule reference dirty
# strings' array
MS_GUESSED_TAGS=23
#
# Modules symbolic name, or sha, if module HEAD is detached.
# For getting this info the 'git status --long' command is used. git status takes this information from git reflog,
# then this is not 100% reliable. For example in some cases it can show wrong last 'git tag'
MS_MODULE_REFNAME=24

# Module's upstream branch
MS_UPSTREAM=25

# How many revisions ahead & behind to the module's upstream
MS_UPSTREAM_AHEAD=26
MS_UPSTREAM_BEHIND=27


########################### CONSTANTS FOR MODULE FILE SYSTEM  ###############################################
## Array is filled up in function umbrella_bootstrap () and serves for path resolution
#
MFS_MODULE_NAME=0
MFS_RELATIVE_PATH=1
MFS_GIT_DIR=2
MFS_FULL_PATH=3
MFS_MODULE_PATH=4
MFS_MODULE_INITIALIZED=5
MFS_MODULE_SHA=6
MFS_MODULE_MANAGED=7
MFS_MANAGED_REFNAME=8

# set this to workaround expr problems in shFlags on freebsd
#if uname -s | egrep -iq 'bsd'; then export EXPR_COMPAT=1; fi

typeset g_lego_mode

umbrella_bootstrap (){
  legoRemote=$(get_submodule_config "lego.remote")
  local gitDir
  local umbrellaRepoDir
  local tmpDir=$(mktemp -q -d -t "$(basename "$0")" 2>/dev/null || mktemp -q -d)
  globals[$G_SCRIPT_TMP_DIRECTORY]=${tmpDir}
  globals[$G_LEGO_REMOTE]=${legoRemote:-origin}
  legoRemote=${globals[$G_LEGO_REMOTE]}

  _m_not_git_repository; (( $? )) && exit 1

  gitDir=$(git rev-parse --git-dir)
  normalizedGitDir=${gitDir##*/}
  if [[ ${normalizedGitDir} == ".git" ]]; then
    umbrellaRepoDir=$(git rev-parse --show-toplevel)
  else
    pushd "${gitDir%%/.git/*}"  &>/dev/null
    umbrellaRepoDir=$(git rev-parse --show-toplevel)
    popd  > /dev/null
  fi

#  rm ${cwTmpSubmodules} &>/dev/null
  pushd ${umbrellaRepoDir} &>/dev/null


#  local remoteOrigin=$(git remote show)
  local umbrellaOriginUrl umbrellaRepoName
#  if [[ -n ${legoRemote} ]]; then
#    local url=$(get_repo_url "$umbrellaRepoDir")
#
#    umbrellaOriginUrl=$(git remote get-url "${legoRemote}")
#    umbrellaRepoName=${umbrellaOriginUrl##*:}
#    umbrellaRepoName=${umbrellaRepoName##*/}
#
#  else
#    umbrellaOriginUrl=$(pwd)
#    umbrellaRepoName=${umbrellaOriginUrl##*/}
#  fi
    umbrellaOriginUrl=$(pwd)
    umbrellaRepoName=${umbrellaOriginUrl##*/}

  globals[$G_AFFECTED_MODULES]=${tmpDir}/affected
  globals[$G_MODULES_FN]=${tmpDir}/modules

#  git submodule foreach --recursive  |  sed "s/[^']*//" | tr -d "'" >>  ${tmpModules}

  #globals is an array defined in the caller of this method
  globals[$G_ROOT_DIR]=${umbrellaRepoDir}
  globals[$G_MODULE_GIT_DIR]=${gitDir}
  globals[$G_ROOT_NAME]=${umbrellaRepoName}
  local sha=$( git rev-parse HEAD )

  ##
  local implicit
  read g_lego_mode implicit < <(get_lego_mode 1)
#  echo $g_lego_mode ${implicit:-2}

  module_startup_investigate "${umbrellaRepoName}" "/" ".git" "${umbrellaRepoDir}" "/" 1 "${sha}" 1 "$NA"
#  cat ${globals[$G_MODULES_FN]} >&2
#  echo ${g_module_name[@]} >&2
#  echo ${g_module_inited[@]} >&2
#  echo ${g_module_managed[@]} >&2
  popd &>/dev/null
  splash ${umbrellaRepoName} ${implicit}

  return 0
}


function module_startup_investigate() {
#echo "$FUNCNAME() $@" >&2
  local tmpModules=${globals[$G_MODULES_FN]}
  echo "$@">>${tmpModules}
  # keep all module descriptors' values in the global arrays for cached access
  # basically they will be used in 'module_info' method
  g_module_name+=($1)
  g_relative_paths+=($2)
  g_git_dirs+=($3)
  g_full_paths+=($4)
  g_module_paths+=($5)
  g_module_inited+=($6)
  g_module_shas+=($7)
  g_module_managed+=($8)
  g_managed_refnames+=($9)

  while read -a module
  do
    local subModule=${module[$MFS_MODULE_NAME]}
    local localPath="${module[MFS_RELATIVE_PATH]}"
    local is_initialized=1
    local moduleStatus=($(git submodule status -- ${subModule}))
    local managed=($(resolve_module_managed "${localPath}" "${subModule}"))

    pushd ${localPath} &> /dev/null
    module+=($(get_repo_git_dir))             # MFS_GIT_DIR=2
    module+=($(pwd))                          # MFS_FULL_PATH=3

    if [[ $5 == "/" ]]; then                  # MFS_MODULE_PATH = 4
      module+=("/$subModule")
    else
      module+=("$5/$subModule")
    fi
    if [[ ${moduleStatus:0:1} == "-" ]]; then
      is_initialized=0
    fi
    module+=(${is_initialized})               #MFS_MODULE_INITIALIZED=5
    local statusLine=("${moduleStatus}")
    local sha=${statusLine[0]}
    if [[ ${sha:0:1} == - || ${sha:0:1} == + ]]; then
      sha=${sha:1}
    fi
    module+=(${sha})                          # MFS_MODULE_SHA 6
    module+=("${managed[0]}")                 # MFS_MODULE_MANAGED 7
    module+=("${managed[1]}")                 # MFS_MANAGED_REFNAME 8

    module_startup_investigate ${module[@]}
    popd &> /dev/null
  done < <(git config -f .gitmodules --get-regexp "submodule.*.path" | sed -E "s/submodule\.(.*)\.path/\1/")
}


function umbrella_finalize() {
  rm -rf ${globals[$G_SCRIPT_TMP_DIRECTORY]}
  _m_finalize
}

warn() { echo "$@" >&2; }
#die() { warn "$@"; exit 1; }

function die() {
  local msg="$1"
  [ -z "${msg}" ] && "Something goes wrong."
  cw_echo "${msg}"
  exit 1
}

function panic() {
  local msg="$1"
  [ -z "${msg}" ] && "Unexpected error. Please check the code or file bug to the forum/github/etc"
  echo "panic: ${msg}"
  exit 2
}

typeset cwVerboseContinue=0

function cw_cr() {
  printf "\n" >&2

}

function cw_echo() {
  echo "${0##*/}: $1"
  if [[ -n "$2" ]]; then
    shift
    cw_verbose_start
    while [ -n "$1" ]; do
      cw_verbose "$1\n"
      shift
    done
    cw_verbose_stop
  fi
}

function cw_verbose_start () {
  cwVerboseContinue=1
}


function cw_verbose () {
  if (( $verbose )); then
    printf "verbose: $1" >&2
    (( ! $cwVerboseContinue )) && printf "\n" >&2
  fi
}

function cw_verbose_stop () {
  if (( $verbose )); then
    if (( $cwVerboseContinue )); then
      printf "\n" >&2
    fi
    cwVerboseContinue=0
  fi
}

function splash() {
  (( $skipSplash )) && return
  local url=$1
  local implicit=$2
  local legoMode=${g_lego_mode}
  if [[ $legoMode == empty ]]; then
    legoMode='cleaned'
  fi

  local msg="project: $url, lego mode: $legoMode"
  (( $implicit )) && [[ $g_lego_mode != empty ]] && msg+=" (guessed)"

  local currentGitDir=$(get_repo_git_dir)
  local currentRepoName=${currentGitDir##*/modules/}
  [[ -n ${currentRepoName} && ${url} != ${currentRepoName} && $currentGitDir != ".git" ]] && msg+=", current module '"${currentRepoName}"'"
  cw_echo "${msg}"
}


function get_refname_from_head() {
  local type=${1:-full}
  if [[ $type == full ]]; then
    option=--symbolic-full-name
  fi
  local fullRefname=$( git rev-parse --symbolic-full-name HEAD 2>/dev/null )
  local ret=()
  local abbrevRefCheck=0
  local token=sha
  case ${fullRefname} in
    refs/tags/*)
      abbrevRefCheck=1
      refname=${fullRefname#refs/tags/}
      token=pinned
      ;;
    refs/heads/*)
      abbrevRefCheck=1
      refname=${fullRefname#refs/heads/}
      token=branch
      ;;
#    HEAD)
  esac
  ret+=($token)
  
  local option
  if (( $abbrevRefCheck )); then
    option=--abbrev-ref
  else
    option=--short
  fi

  fullRefname=$( git rev-parse ${option} HEAD 2>/dev/null )
  ret+=($fullRefname)
  
#  echo "${ret[@]}" >&2
  echo "${ret[@]}"
}

function get_repo_url() {
  [[ -n $1 && $1 != "." ]] && pushd $1  &> /dev/null
  local url=$(git remote get-url ${globals[$G_LEGO_REMOTE]} &> /dev/null)
  [[ -n $1 && $1 != "." ]] && popd  &> /dev/null
  echo ${url}
}

function get_repo_name_from_path() {
  [[ -n $1 && $1 != "." ]] && pushd $1  > /dev/null
  local gitDir=$(get_repo_git_dir)
  [[ -n $1 && $1 != "." ]] && popd  > /dev/null
  local name="${gitDir##*/modules/}"
  [[ $name == ".git" ]] && echo "/" || echo "$name"
}

function get_repo_git_dir() {
  [[ -n $1 && $1 != "." ]] && pushd $1  > /dev/null
  local url=$(git rev-parse --git-dir)
  [[ -n $1 && $1 != "." ]] && popd  > /dev/null
  echo ${url}
}

function get_module_path_up() {
  local ret=1
  local path

  if [[ $1 != "/" ]]; then
    path=${1%/*}

    (( ! ${#path} )) && path="/"
    ret=0

  fi

  (( ! $ret )) && echo "${path}"
  return ${ret}
}


function level_verbose_about_to {

  local path=$4
  local info="about to ${0##*/} module '${1}'"
  # global
  verboseMsg=([1]="path: $path")
  verboseMsg+=("url: "$(get_repo_url))

  if (( $verbose )); then
    cw_cr
  fi

  local fineIssues infoIssues
  verboseMsg[0]=${info}
#set +x
  cw_echo "${verboseMsg[@]}"

}


#
## Checks affected modules, which can be set after double dash
## ie. status / -- libs will check only libs module
#
# Parameters
#     $1 Module's full path to be tested on existence in afterDash array
#
# Returns
#     0 - module is found and listed in after dash parameters, or after-dash parameters are not set
#     1 - module is found but not listed in after dash parameters (out-filtered)
#     2 - N/A module is not found or wrong argument
#
# Globals using
#     $afterDash - array, which contains restricted module list, can be given after double dash or some other manner
#     $affected  - this variable should be defined outside of this function (output variable)
#
# TODO take into account --recursive flag
#
function drop_to_affected() {
  local path=$1
  local found=0
  local ret=1

#  affected=0

  [[ -z ${path} ]] && panic "$FUNCNAME() missed parameter 'path'"

  while read -a module; do
    found=0
    local moduleName=${module[$MFS_MODULE_NAME]}
    if [[ "$path" == ${module[$MFS_FULL_PATH]} || "$path" == ${module[$MFS_MODULE_PATH]} ]]; then
      found=1
      if (( ${#afterDash[@]} )); then
        found=0
        for branch in "${afterDash[@]}"; do
          # exact comparison, not matching
          if [ "${moduleName}" == ${branch} ]; then
            found=1
            break
          fi
        done
      fi
    fi

    if (( ${found} )); then
      affected=1
      ret=0
      echo ${module[@]} >> ${globals[$G_AFFECTED_MODULES]}
      break
    fi

  done < <(cat ${globals[$G_MODULES_FN]})
#  echo "${ret}"
  return ${ret}
}

function module_descriptor() {
  local levelPath=$1
  local found=0

  while read -a module; do
    found=0
    local moduleName=${module[$MFS_MODULE_NAME]}
    local fullPath=${module[MFS_FULL_PATH]}
    if [ "$levelPath" == "$fullPath" ]; then
      found=1
    fi

    if (( ${found} )); then
      echo ${module[@]}
      break
    fi

  done < <(cat ${globals[$G_MODULES_FN]})
}


function get_module_path_down() {
  local path
  local originPath="$1"
  local reminder="$2"
  if [[ ${originPath:(-1)} == "/" ]]; then
    path="$originPath$reminder"
  else
    path="$originPath/$reminder"
  fi

  local ret=1

  for mp in ${g_module_paths[@]}; do
    if [[ ${mp} == ${path} ]]; then
      ret=0
      break
    fi
  done

  (( ! $ret )) && echo "${path}"
  return ${ret}
}


function resolve_module_path() {
  cantResolve="Can't resolve module path '$1'"
  local originPath reminder="$1"
  local default="$2"

  if [[ -z ${reminder} ]]; then
    reminder=$default
  fi

  if [[ -n ${reminder} ]]; then
    if [[ -n ${reminder%%/*} && -n ${reminder%%../*} && $reminder != ".." && -n ${reminder%%./*} && $reminder != "." ]]; then
      reminder="./$reminder"
    fi

    if [[ -z ${reminder%%/*} ]]; then
      originPath="/"
      reminder=${reminder:1}
    elif [[ -z ${reminder%%../*} || $reminder == ".." ]]; then
      reminder=${reminder:3}
      originPath=$(_m_pmd)
      originPath=$(get_module_path_up ${originPath})
      (( $? )) && die "${cantResolve}"
    elif [[ -z ${reminder%%./*} || $reminder == "." ]]; then
      reminder=${reminder:2}
      originPath=$(_m_pmd)
    fi

    if (( ${#reminder} )); then
      IFS="/" read -a parts <<< $reminder
      for part in $parts; do
        case $part in
          \.\.\.)
            die "${cantResolve}"
          ;;
          \.\.)
            originPath=$(get_module_path_up ${originPath})
            (( $? )) && die "${cantResolve}"
          ;;
          \.)
            ## nothing
          ;;
          *)
            originPath=$(get_module_path_down ${originPath} ${part})
            (( $? )) && die "${cantResolve}"
          ;;
        esac
      done
    fi
  fi

  [[ -z $originPath ]] && originPath="${default}"

  echo "${originPath}"
}

function module_info () {
  local modulePath="$1"
  shift
  local index=0
  local ret=1
  local results=()
  for mp in ${g_module_paths[@]}; do
    if [[ ${mp} = ${modulePath} ]]; then
      ret=0
      break
    fi
    index=$(( index + 1 ))
  done


  while [[ -n $1 ]]; do
    case $1 in
      index)
        results+=($index)
        ;;
      name)
        results+=(${g_module_name[$index]})
        ;;
      relative|local)
        results+=(${g_relative_paths[$index]})
        ;;
      full|path)
        results+=(${g_full_paths[$index]})
        ;;
      gitdir)
        results+=(${g_git_dirs[$index]})
        ;;
      sha)
        results+=(${g_module_shas[$index]})
        ;;
      initialized)
        results+=(${g_module_inited[$index]})
        ;;
      managed)
        results+=(${g_module_managed[$index]})
        ;;
      refname)
        results+=(${g_managed_refnames[$index]})
        ;;
      *)
        ret=2
        break
    esac
    shift
  done

  (( ${#results[@]} )) && echo ${results[@]}
  return ${ret}
}


function is_branch_exists() {
  [[ -z $1 ]] && (panic "'branch' argument for is_branch_exists() should be given")
  local branchName=$1
  local where=$2
  local checkedSites=("", "${globals[$G_LEGO_REMOTE]}")
  local ret=0
  if [[ -n $where ]]; then
    # TODO
    die "'where' parameter for is_branch_exists() not implemented yet"
  fi

  for prefix in "${checkedSites[@]}"; do
    (( ${#prefix} )) && prefix+="/"
    git rev-parse --no-revs "${prefix}${branchName}" &>/dev/null
    local ret=$?

    # inverting
    if (( ! $ret )); then
      ret=1
    else
      ret=0
      break
    fi
  done

  echo ${ret}
  return ${ret}
}


typeset MODULE_STATUS=()
#
##  Get status for current module
#
#     Filling up $MODULE_STATUS array with parsed information about current module state.
#     Information in the array will be valid till next call of the method.
#     Directory of module should be set outside this function.
#
## Parameters
#     $1  - file path of current module
#     $2  - caller, which indicated the caller script, ie. "status"/"commit"/..
#     ... - other parameters relevant to its caller
#       For 'status' mode
#           $3 - stick-on-branches, branch which outer module expects inner module to be
#
## Globals affected
#     $MODULE_STATUS array
#
function module_porcelain_status() {

  local remoteInteraction=0 managedBranch guessedBranched=()
  unset MODULE_STATUS

  local modulePath="$1"
  local moduleSha
  local managed

  [[ -z ${modulePath} ]] && panic "$FUNCNAME() missed parameter 'path'"

  local caller=$2
  [[ $caller == push || $caller == pull ]] && remoteInteraction=1

#  set -x
  read initialized managedAlias managedRefname < <(module_info ${modulePath} initialized managed refname)
  if [[ -z $initialized ]]; then
    set -x
    echo ${g_module_inited[@]}
    echo "$FUNCNAME(), modulePath: $1, caller: $2" >&2
  fi

  if [[ $managedAlias == unmanaged ]]; then
    MODULE_STATUS[$MS_UNMANAGED]=1
  else
    local index=0
    for alias in "${g_lego_aware_tokens_gitmodules[@]}" ; do
      if [[ $alias == $managedAlias ]]; then
        break
      fi
      index=$(( $index + 1 ))
    done

    MODULE_STATUS[$MS_UNMANAGED]=0
    MODULE_STATUS[$MS_MANAGED]=$index

    if [[ -n $managedRefname && $managedRefname != "$NA" ]]; then
      MODULE_STATUS[$MS_MANAGED_REFNAME]=${managedRefname}
    fi

  fi
#  [[ $modulePath == /macosx ]] && die

  local moduleRefname
  declare -a output
  if [[ -z $initialized ]]; then
    die
  fi
  if (( ! $initialized )) ; then
    MODULE_STATUS[$MS_UNINITIALIZED]=1
  else
    MODULE_STATUS[$MS_UNINITIALIZED]=0

    while read switch line; do
#      echo $switch >&2
#      echo $line >&2
      # parse line into array or words
      output=(${line})

      case $switch in
        \#)
          case ${output[0]} in
            branch\.oid)
              moduleSha=${output[1]}
              # TODO do this at bootstrap
              MODULE_STATUS[$MS_MODULE_REFNAME]=$( git rev-parse --short "$moduleSha" )
              ;;
            branch\.head)

              if [[ ${output[1]} == \(detached\) ]]; then
                MODULE_STATUS[$MS_DETACHED]=1
                ## git status --porcelain does not shows get tag version
                ## so we need to use 'old good' git status --long for that
                while read -a output; do
                  # find out tag or has
                  # format HEAD detached at 23a34b or HEAD detached at refs/heads/master
                  local parsedLength=${#output[@]}
                  moduleRefname=${output[$parsedLength-1]}
                done < <(git status --long -uno | grep "HEAD detached at")

                if [[ -n ${moduleRefname} ]] ; then
                  MODULE_STATUS[$MS_MODULE_REFNAME]="${moduleRefname}"

                  local plainSha=$( git rev-parse --short "$moduleRefname" )
                  if [[ "$moduleRefname" == $plainSha ]] ; then
                    # specifies it's plain sha, not tag or detached head
                    MODULE_STATUS[$MS_DETACHED]=2
                  fi
                fi
              else
                MODULE_STATUS[$MS_DETACHED]=0
                MODULE_STATUS[$MS_MODULE_REFNAME]=${output[1]}
              fi
              if [[ (${MODULE_STATUS[$MS_DETACHED]} != ${MODULE_STATUS[$MS_MANAGED]}  ||  ${MODULE_STATUS[$MS_MANAGED_REFNAME]} != ${MODULE_STATUS[$MS_MODULE_REFNAME]} ) && ${MODULE_STATUS[$MS_UNMANAGED]} == 0 && $modulePath != / ]]; then
                MODULE_STATUS[$MS_MISMATCHED]=1

                if (( ${MODULE_STATUS[$MS_DETACHED]} > 0 )) && [[ -n ${managedRefname} ]]; then
                  calculate_ab_for_tags "${managedRefname}"
                fi
              else
                MODULE_STATUS[$MS_MISMATCHED]=0
              fi
              ;;
            branch\.upstream)
              MODULE_STATUS[$MS_UPSTREAM]=${output[1]}
              ;;
            branch\.ab)
              MODULE_STATUS[$MS_UPSTREAM_AHEAD]=${output[1]:1}
              MODULE_STATUS[$MS_UPSTREAM_BEHIND]=${output[2]:1}
              ;;
          esac
          ;;

        \?)
          local entryName="${output[0]}" #.gitmodule or .gitlego
          if [[ ${entryName} == \.gitmodules  || ${entryName} == \.gitlego ]]; then
            MODULE_STATUS[$MS_MODIFIED_SUBMODULE]=$(( MODULE_STATUS[$MS_MODIFIED_SUBMODULE] + 1 ));
          else
            MODULE_STATUS[$MS_UNTRACKED]=$(( MODULE_STATUS[$MS_UNTRACKED] + 1 ));
          fi
          ;;

        1|2)
          local fileState=${output[0]}
          local fChar=${fileState:0:1} sChar=${fileState:1:1}
          local submoduleToken=${output[1]}
          local entryName=${output[7]} #.gitmodule or .gitlego or submodule name
          if [[ ${entryName} == \.gitmodules  || ${entryName} == \.gitlego  || ${submoduleToken:0:1} == S ]]; then MODULE_STATUS[$MS_MODIFIED_SUBMODULE]=$(( MODULE_STATUS[$MS_MODIFIED_SUBMODULE] + 1 ));
          elif [[ ${fChar} == M || ${sChar} == M ]] ; then MODULE_STATUS[$MS_MODIFIED]=$(( MODULE_STATUS[$MS_MODIFIED] + 1 )) ; MODULE_STATUS[$MS_COMMITABLE]=1;
          elif [[ ${fChar} == A || ${sChar} == A ]] ; then MODULE_STATUS[$MS_ADDED]=$(( MODULE_STATUS[$MS_ADDED] + 1 )); MODULE_STATUS[$MS_COMMITABLE]=1;
          elif [[ ${fChar} == D || ${sChar} == D ]] ; then MODULE_STATUS[$MS_DELETED]=$(( MODULE_STATUS[$MS_DELETED] + 1 )); MODULE_STATUS[$MS_COMMITABLE]=1;
          elif [[ ${fChar} == R || ${sChar} == R ]] ; then MODULE_STATUS[$MS_RENAMED]=$(( MODULE_STATUS[$MS_RENAMED] + 1 )); MODULE_STATUS[$MS_COMMITABLE]=1;
          elif [[ ${fChar} == C || ${sChar} == C ]] ; then MODULE_STATUS[$MS_COPIED]=$(( MODULE_STATUS[$MS_COPIED] + 1 )); MODULE_STATUS[$MS_COMMITABLE]=1;
          elif [[ ${fChar} == U || ${sChar} == U ]] ; then MODULE_STATUS[$MS_UNMERGED]=$(( MODULE_STATUS[$MS_UNMERGED] + 1 )); MODULE_STATUS[$MS_COMMITABLE]=1; fi
          ;;

      esac

    done < <(git status -u --porcelain=2 -b)

    guess_refnames_of_commit "$modulePath" HEAD

  fi
#  echo "$FUNCNAME(): ${MODULE_STATUS[@]}"
}


function module_up() {
  cd $(git rev-parse --show-toplevel)"/.."
  cd $(git rev-parse --show-toplevel)
}


calculate_ab_for_tags() {
#  echo "$FUNCNAME()" >&2
  local rev=$1
  local against=${2:-HEAD}
  local ret=()
  local reachable=$( git merge-base "$rev" "$against" 2>/dev/null | wc -l )
  if (( $reachable )); then
    local out=$( git rev-list "$against".."$rev" 2>/dev/null | wc -l )
    local a=$(( $out + 0 ))
    if (( $a )); then
      MODULE_STATUS[$MS_UPSTREAM_AHEAD]=$a
    else
      out=$( git rev-list "$rev".."$against" 2>/dev/null | wc -l )
      MODULE_STATUS[$MS_UPSTREAM_BEHIND]=$(( $out + 0 ))
    fi
  fi
}


function guess_refnames_of_commit() {
  local modulePath="$1"
  local ret hash=${2:-HEAD}
  local branches=()
  local tags=()
  # const
  local legoRemote=${globals[$G_LEGO_REMOTE]}

  if [[ ${modulePath} != / ]]; then
    while read moduleSha commit ref; do
#      echo $ref >&2
      refParsed=$(git rev-parse --abbrev-ref=loose ${ref})
      found=0

      if [[ ${ref#refs/tags/} == ${refParsed} ]] ; then
        for tag in ${tags[@]}; do
          if [[ "${tag}" = ${refParsed} ]]; then
            found=1
            break
          fi
        done

        if [[ ${found} == 0 ]]; then
#          echo ${refParsed} >&2
          tags+=("${refParsed}")
        fi
      else
        if [[ ${refParsed#heads/} != $refParsed ]]; then
          # filter out heads/master
          refParsed=${refParsed#heads/}


        elif [[ ${refParsed#${legoRemote}/} != $refParsed ]]; then

          # filter out origin/master
          refParsed=${refParsed#${legoRemote}/}


        elif [[ ${ref#refs/remotes/} == $refParsed ]]; then

          # filter out heads/remotes/other_remote/master
          local otherRemote=${ref#refs/remotes/} # other_remote/master
          if [[ ${otherRemote#${legoRemote}/} == ${otherRemote} ]]; then
            found=1
          fi
        fi

        if (( ! $found )); then
          for branch in ${branches[@]}; do
            if [[ "${branch}" == ${refParsed} ]]; then
              found=1
              break
            fi
          done

          if (( ! $found )) ; then
#            echo ${refParsed#${legoRemote}/} >&2
            branches+=("${refParsed#${legoRemote}/}")
          fi

        fi

      fi

    done < <(git for-each-ref --points-at=${hash})

    MODULE_STATUS[$MS_GUESSED_BRANCHES]="${branches[@]}"
    MODULE_STATUS[$MS_GUESSED_TAGS]="${tags[@]}"
  fi
}


construct_section_name() {
  local modulePath="$1"
  local extension="$2"
  local dir="${globals[$G_SCRIPT_TMP_DIRECTORY]}"
  local fn once=0

  if [[ ${#modulePath} == 0 || ${modulePath:0:1} != "/" ]]; then
    fn+="/"
  fi
  (( ${#modulePath} )) && fn+=${modulePath}

  fn=$(echo ${fn} | tr "/" "_")
  echo "$dir/${fn}.${extension}"
}

function export_gitmodules_section {
  echo ${FUNCNAME}": $@" >&2
  local modulePath="$1"
  local moduleName="$2"
  local revision="$3"
  local dumpFileName=$(construct_section_name "$1" "$3")
#  echo "${dumpFileName}"
#  pwd
  while  read -a module; do
    echo ${module[@]} >> ${dumpFileName}
  done < <(git config --file .gitmodules --get-regexp "submodule.${moduleName}.*")
#  cat "${dumpFileName}"
}

function import_gitmodules_section {
  echo ${FUNCNAME}": $@" >&2
  local modulePath="$1"
  local moduleName="$2"
  local revision="$3"
  local dumpFileName=$(construct_section_name "$1" "$3")
#  echo "${dumpFileName}"
#  pwd
  while  read -a setting; do
    git conifg --file .gitmodules ${setting[@]}
  done < <(cat "${dumpFileName}")
}


function prepare_checkout_level() {
  echo ${FUNCNAME}": $@" >&2
#  [[ -z ${levelPath} ]] && panic "$FUNCNAME()... parameter 'path' is required"
  local levelRevision="$1"
  local modulePath="$2"
  local moduleName="$3"
  local levelPath="$4"
  local toBeDeleted=$5
  local parentCheckBranch="$6"
  local parentCheckCommit="$7"
  local parentRevision="${parentCheckBranch}"
  if [[ -z "${parentRevision}" ]]; then
    parentRevision="${parentCheckCommit}"
  fi

  local -a modulesBefore
  local -a modulesAfter
  local -a removedModules

  local ret=0 checkRevision
  local childRet # child modules return code

  pushd "${levelPath}" &> /dev/null

  if (( $toBeDeleted )); then

    module_porcelain_status "${modulePath}" checkout

    if [[ 0 == ${force} &&  (1 == ${MODULE_STATUS[$MS_COMMITABLE]} || 1 == ${MODULE_STATUS[$MS_UNTRACKED]} || 1 == ${MODULE_STATUS[MS_PUSHABLE]}) ]]; then
      dieMsg+="Module '$moduleName' has not committed or not pushed changes, but intended to be deleted as it does not exists in revision '$revision'"
      ret=1
    fi

  else
    ### Use case when in new checkout revision the submodule not exists, but in current branch it is change
    ### It should be vetoed, but this veto can be disclosed only on the next call for getting if sub-module is
    ### commitable.
    while read -a module; do
      local after="${module[0]}"
      modulesAfter+=($after)
      local branchAfter=$(git config --blob ${levelRevision}:.gitmodules --get "submodule.${after}.branch" )
      local commitAfter=$(git config --blob ${levelRevision}:.gitmodules --get "submodule.${after}.commit" )
      local revisionAfter=${branchAfter}
      if [[ -z $revisionAfter ]]; then
        revisionAfter=${commitAfter}
      fi
      revisionsAfter+=(${revisionAfter})
    done < <(git config --blob ${levelRevision}:.gitmodules --get-regexp "submodule.*.path" | sed -E "s/submodule\.(.*)\.path/\1/" )

    local found=0
    while read -a module; do
      local b="${module[0]}"
      modulesBefore+=("$b")
      for a in ${modulesAfter[@]}; do
        if [[ $a == $b ]]; then
          found=1
          break
        fi
      done
      if (( ! $found )); then
        removedModules+=("${b}")
      fi
    done < <(git config -f .gitmodules --get-regexp "submodule.*.path" | sed -E "s/submodule\.(.*)\.path/\1/")

    drop_to_affected "${levelPath}"

    found=0
    while read -a module; do
      local after="${module[0]}"
      found=0
      for b in ${modulesBefore[@]}; do
        if [[ $after == $b ]]; then
          found=1
          break
        fi
      done
      if (( ! $found )); then
#        drop_to_affected "${levelPath}/${module[1]}"
        local localPath="${module[1]}"
        local childModulePath="${modulePath}"
        if [[ ${modulePath:(-1)} != "/" ]]; then
          local childModulePath+="/"
        fi
        childModulePath+="$after"
        ## dummy git dir
        echo "${after}" "${localPath}" "^" "${levelPath}/${localPath}" "$childModulePath" >> ${globals[$G_AFFECTED_MODULES]}
        affected=1
      fi
    done < <(git config --blob ${levelRevision}:.gitmodules --get-regexp "submodule.*.path" 2> /dev/null | sed -E "s/submodule\.(.*)\.path/\1/" )


    if [ -f .gitmodules ]; then
      while read -a module; do
        childRet=0
        subModule="${module[0]}"
        localPath="${module[1]}"
        local path="${levelPath}"/"${localPath}"

  #      checkoutd "${path}" &> /dev/null
        local childModulePath="${modulePath}"
        if [[ ${modulePath:(-1)} != "/" ]]; then
          local childModulePath+="/"
        fi
        childModulePath+="$subModule"

        local childToBeDeleted=0
        for b in ${removedModules[@]}; do
          if [[ $subModule == $b ]]; then
            childToBeDeleted=1
            break
          fi
        done

        if (( ! childToBeDeleted )); then
          local checkBranch=$(git config --blob "${levelRevision}":.gitmodules --get submodule."${subModule}".branch) 2> /dev/null
          local checkCommit=$(git config --blob "${levelRevision}":.gitmodules --get submodule."${subModule}".commit) 2> /dev/null
          checkRevision="${checkBranch}"
          if [[ -z $checkRevision ]]; then
            checkRevision="${checkCommit}"
          fi
        else
          checkRevision="^"
          # dump .gitmodules section in the separate temp file, (merge preparation)
#          export_gitmodules_section "${path}" "${subModule}" "${checkRevision}"
        fi

        prepare_checkout_level "${checkRevision}" "${childModulePath}" "${subModule}" "${path}" "${childToBeDeleted}" "${checkBranch}" "${checkCommit}"
        childRet=$?

        (( $childRet > $ret )) && ret=${childRet}
        popd  &> /dev/null

      done < <(git config -f .gitmodules --get-regexp "submodule.*.path" | sed -E "s/submodule\.(.*)\.path/\1/")
    fi
  fi

  popd &> /dev/null
  return ${ret}
} ## of prepare_checkout_level

##
## Checks branching state for current repository
## Let name the branch is synchronized if entry submodule.<module-name>.branch in .gitmodules is matched
## to the branch of the sub-repository, (what can be checked via 'cd module-path; git branch',
##
## It they are mismatched, 3 options are possible.
##
## 1. Sub-repo can be detached. In this case we are looking for value in the outer repo and doing git checkout branch
## 2. Sub-repo is pinned to another branch that is given in .gitmodules. To sync this we just changing value in .gitmodules file of outer repo
## 3. Sub-repo is detached, no value in .gitmodules. We are unable to re-syncronize, notify user about and exit.
## Parameters:
##      $1 path [required] - path getting started checking.
##      $2 doSync [optional, by default 0] - do synchronization (case 1) or not
##
## The function calls itself recursively to drill down to any leave repos.
##
## Returns
##
function check_branch_sync() {
  local levelPath="$1"
  local doSync=${2:-0}

  [[ -z ${levelPath} ]] && panic "check_branch_sync()... parameter 'path' is required"
  local repoBranch
  local ret=0   # return code, 0 - the repo is synchronized
  local childRet # child return code
  cd "${levelPath}"

  while read -a repo; do
    childRet=0
    subRepoName="${repo[0]}"
    checkBranch=$(git config --file .gitmodules --get submodule."${subRepoName}".branch)
    checkPath="${repo[1]}"
    subRepoPath="${levelPath}"/"${checkPath}"

    #    echo "${subRepoName}" "${checkBranch}" "${checkPath}"

    pushd "${subRepoPath}" &> /dev/null
    #    pwd

    repoBranch=$(git rev-parse --abbrev-ref HEAD)
    local detached=0
    [[ "${repoBranch}" == "HEAD" ]] && detached=1

    #    echo "${repoBranch}"
    if [[ ${repoBranch} != ${checkBranch} ]]; then

      ret=1
      (( ! $doSync )) && cw_echo "Module ${subRepoName} is not synchronized"
      #      echo "$repoBranch != $checkBranch"

      #
      if [[ -n "${repoBranch}" && ${detached} == 0  ]]; then
        cd "${levelPath}"
        if (( $doSync )); then
          cw_echo "About to change reference in .gitmodules for submodule $subRepoName to branch $repoBranch"
          git config --file .gitmodules submodule."${subRepoName}".branch "${repoBranch}"
          ret=$?
        fi
      elif [[ -n "${checkBranch}" && ${detached} == 1 ]]; then
        cd "${subRepoPath}"
        if (( $doSync )); then
          cw_echo "About to checkout submodule $subRepoName to branch $checkBranch"
          git checkout ${checkBranch}
          ret=$?
        fi
      else
        cw_echo "Warning: submodule ${subRepoName} can't be synchronized"
        ret=2
      fi
    else
      (( $doView )) && cw_echo "Module '$subRepoName' at '$checkBranch' branch"
    fi

    if [[ -e .gitmodules ]]; then
      check_branch_sync "${subRepoPath}" ${doSync}
      childRet=$?
    fi
    (( $childRet )) && ret=1


    popd  &> /dev/null

    if (( $doSync )); then
      git diff --exit-code --quiet -- .gitmodules
      needToCommit=$?
      #echo "needToCommit=${needToCommit}"
      if (( $needToCommit)); then
        if (( $doAutoCommit )); then
          git add .gitmodules
          git commit -m "$subRepoName submodule configuration is changed"
        else
          needMessageToPush=1
        fi
      fi
    fi
  done < <(git config -f .gitmodules --get-regexp "submodule.*.path" | sed -E "s/submodule\.(.*)\.path/\1/")

  return "${ret}"
} ## of check_branch_sync



  ######################################################################################################################
  #################################################   MLS  #############################################################
  ######################################################################################################################



function _m_finalize() {
  unset strict
  unset verbose
  unset recursive
#  set +x
}

function _m_mls() {
  local ret=0
  while read -a module; do
    subModule="${module[0]}"
    localPath="${module[1]}"
    pushd "$localPath" &> /dev/null
    _m_pmd

# TODO recursive is not defined. should be parameter?
    if (( $recursive )); then
      _m_mls && ret=1
    fi

    popd &> /dev/null
  done < <(git config -f .gitmodules --get-regexp "submodule.*.path" | sed -E "s/submodule\.(.*)\.path/\1/")
  return ${ret}
}

function _m_not_git_repository() {
  git rev-parse --git-dir &> /dev/null
  if (( $? )); then
    _m_die "Not a git repository"
    return 1
  fi
  return 0
}


function _m_pmd() {
  local gitDir=$(_m_git_dir)
  gitDir=${gitDir##*.git/}
  local path
  IFS="/" read -a names <<< ${gitDir}

  for name in ${names[@]}; do
    if [ ${name} != "modules" -a $name != ".git" ]; then
      path+=/"$name"
    fi
  done

  [[ -z $path ]] && path="/"
  echo  "${path}"
}


function _m_die() {
  echo $1 >&2
  _m_finalize
}


function _m_path_resolution() {
  local originPath reminder="$1"
  if [[ ${reminder} != "." && -n ${reminder} ]]; then
    local strict=$2

    if [[ -n ${reminder} ]]; then

      if [[ -z ${reminder%%/*} ]]; then
        _m_root 1; (( $? )) && return 1
        reminder=${reminder:1}
      elif [[ -z ${reminder%%../*} || $reminder == ".." ]]; then
        reminder=${reminder:3}
        _m_pwd 1
        _m_up 1; (( $? )) && return 1
      elif [[ -z ${reminder%%./*} || $reminder == "." ]]; then
        reminder=${reminder:2}
        _m_pwd 1
      fi

      if (( ${#reminder} )); then
        IFS="/" read -a parts <<< $reminder
        for part in $parts; do
          case $part in
            \.\.)
              _m_up 1; (( $? )) && return 1
            ;;
            \.)
              ## nothing
            ;;
            *)
              _m_down ${part} 1 $strict; (( $? )) && return 1
            ;;
          esac
        done
      fi
    fi
  else
    _m_pwd 1
  fi

  pwd
}


function _m_up() {
  local doCd=$1

  if [[ "$doCd" == 1 ]]; then
    if [[ $(_m_git_dir) == ".git" ]]; then
      echo "Can't get up at the root module" >&2
      return 1
    else
      _m_pwd 1
      cd ..
      _m_pwd 1
    fi
  else
    # TODO
    echo "mode '$FUNCNAME $1' not yet implemented" >&2
    return 1
  fi
}


function _m_down() {
  local path="$1"
  local doCd="$2"
  local ret=1
  local strict="$3"

  if [[ -n $strict ]]; then
    path=${strict}${path}
  fi

  while read -a module; do
    subModule="${module[0]}"
    localPath="${module[1]}"
    echo "$subModule" | grep "${path}" &> /dev/null
    local existsReverted=$?
    if (( ! $existsReverted )); then
      ret=0
      if (( $doCd )); then
        cd "$localPath"
      else
        echo $(_m_pwd)/"${localPath}"
      fi
      break
    fi
  done < <(git config -f .gitmodules --get-regexp "submodule.*.path" | sed -E "s/submodule\.(.*)\.path/\1/")

  return ${ret}
}


  #
  ## Print module directory
  ## just like Unix pwd, but for modules hierarchy
  #
function _m_pwd() {
  local path=$(git rev-parse --show-toplevel)
  local doCd="$1"
  if (( "$doCd" )); then
    cd "${path}"
  else
    echo "${path}"
  fi
}


function _m_git_dir() {
  local url=$(git rev-parse --git-dir)
  echo ${url}
}


function _m_root() {
  local doCd="$1"
  local gitDir=$(_m_git_dir)
  local rootGitDir=${gitDir##*/}
  local root

  if [[ ${rootGitDir} == ".git" ]]; then
    root=$(git rev-parse --show-toplevel)
  else
    root="${gitDir%%/.git/*}"  > /dev/null
  fi

  if (( "$doCd" )); then
    cd "${root}"
  else
    echo "${root}"
  fi
}


#
# Boolean treated as it does in Java/javascript where true == 1|false == 0,
# opposed to bash world, where true == 0|false=1
# Sorry for inconvenience ;)
#
READ_boolean() {
  local input=${1:-0};
  local default=${2}

  case "${input}" in
    true|t|1)
      input=1;
    ;;
    false|f|0)
      input=0
    ;;
    *) warn "wrong format for boolean value, defaulting to 0" ;;
  esac
  echo ${input}
}


#
# Print a submodule configuration setting
#
# $1 = submodule name
# $2 = option name
# $3 = default value
#
# Checks in the usual git-config places first (for overrides),
# otherwise it falls back on .gitmodules.  This allows you to
# distribute project-wide defaults in .gitmodules, while still
# customizing individual repositories if necessary.  If the option is
# not in .gitmodules either, print a default value.
#
get_submodule_config () {
	name="$1"
	option="$2"
	default="$3"
	value=$(git config --get submodule."$name"."$option" &>/dev/null)
	if test -z "$value"
	then
		value=$(git config -f .gitmodules --get submodule."$name"."$option" &>/dev/null)
	fi
	printf '%s' "${value:-$default}"
}

resolve_module_managed() {
  local module_name=$1
  local module_path=$2
  local mode="${3:-$g_lego_mode}"
  local ret=()
  local found=0

  for token in "${g_lego_aware_tokens_gitmodules[@]}" ; do
    local key="${module_name}.${token}"
    local value=$(get_lego_setting_at_mode "${key}" "${mode}" "submodule")

    if (( ${#value} )) ; then
      ret+=("${token}")
      ret+=("${value}")
      found=1
      break
    fi
  done

  if (( ! $found )); then
      ret+=("unmanaged")
      ret+=("$NA")
  fi
  echo "${ret[@]}"
}

################################################### DELETING #################################################

clean_git_config_section() {
echo "$FUNCNAME()" $@ >&2
  local legoModesMask=$1
  [[ -z ${legoModesMask} ]] && panic "$FUNCNAME()... parameter 'modesMask' is required"
  local section=$2
  [[ -z ${section} ]] && panic "$FUNCNAME()... parameter 'section' is required"
  local fileOptions

  local index=0
  for mode in ${g_lego_modes[@]}; do
    local bitIndex=$((1 << $index))
    if (( $bitIndex & $legoModesMask )); then
      if [[ ${mode} == versioned ]]; then
        fileOptions="-f .gitlego"
        if [[ ${section} == lego ]]; then
          section=core
        fi
      elif [[ ${mode} == solo && ${section} == core ]]; then
        section=lego
      fi
      git config ${fileOptions} --remove-section "${section}" 2>/dev/null
    fi
    index=$(( $index + 1 ))
  done

}


clean_module_meta_mode() {
#echo "$FUNCNAME()" $@ >&2
#pwd >&2
  local mode=$1
  local moduleName=$2

  for token in ${g_lego_aware_tokens_gitmodules[@]}; do
    local key="${moduleName}.${token}"

    wipe_lego_setting_at_mode "${key}" "${mode}" "submodule"
  done
}


clean_module_meta() {
#echo "$FUNCNAME()" $@ >&2
  local moduleName=$1     # required
  local legoModesMask=${2:-0} # required as well, by default - nothing wiped

  local index=0
  for mode in ${g_lego_modes[@]}; do
    local bitIndex=$((1 << $index))
    if (( $bitIndex & $legoModesMask )); then
      clean_module_meta_mode "$mode" "$moduleName"
    fi
    index=$(( $index + 1))
  done
}


wipe_lego_setting_at_mode() {
#echo "$FUNCNAME()" $@ >&2
  local key=$1
  local mode=${2:-${g_lego_mode}}
  local section=$3
  local value

  if [[ ${mode} == solo ]] ; then
    value=$( wipe_lego_setting_concrete "$1" "${section}" )
  elif [[ ${mode} == versioned ]] ; then
    value=$( wipe_lego_setting_concrete "$1" "${section}" "-f .gitlego" )
    value=$( wipe_lego_setting_concrete "$1" "${section}" "-f .gitmodules" )
  fi
}

wipe_lego_setting_concrete() {
#echo "$FUNCNAME()" $@ >&2
  local key="$1"
  [[ -z $key ]] && panic "$FUNCNAME() missing parameter 'key'"
  local file_option="${3---}"
  local section="${2:-core}"
  if [[ -z "${file_option##--*}" ]] && [[ ${section} == core ]] ; then
    section=lego
  fi

  if [[ ${file_option} == -- ]]; then
    unset file_option
  fi

  git config ${file_option} --unset "${section}.$key"  2>/dev/null
}

##################################################### SETTING #################################################
set_module_meta_mode() {
echo "$FUNCNAME()" $@ >&2
  local key="$1"
  local value="$2"
  local section="$3"
  local worktree="$4"
  local mode="${5:-${g_lego_mode}}"

  if [[ ${mode} == solo ]] ; then
    value=$( set_lego_setting_concrete "$key" "$value" "$section" "$mode" ..)
  elif [[ ${mode} == versioned ]] ; then
    value=$( set_lego_setting_concrete "$key" "$value" "$section" "$mode" .. "-f .gitlego" )
  fi
}


set_lego_setting_concrete() {
echo "$FUNCNAME()" $@ >&2
  local key="$1"
  [[ -z $key ]] && panic "$FUNCNAME() missing parameter 'key'"
  local value="$2"
  local section="${3:-core}"
  local mode=$4
  local worktree="$5"
  local file_option="${6---}"

  if [[ -z "${file_option##--*}" && ${section} == core ]] ; then
    section=lego
  fi

  if [[ $file_option == -- ]]; then
    file_option=--local
  fi

  if [[ -n ${worktree} ]]; then
    pushd "$worktree" >/dev/null
  fi
  pwd >&2
  echo "git config "$file_option" "$section.$key" "$value"" >&2
  git config "$file_option" "$section.$key" "$value"
  if [[ -n ${worktree} ]]; then
    popd >/dev/null
  fi
}


##################################################### GETTING #################################################
get_lego_setting_at_mode() {
  local key=$1
  local mode=${2:-${g_lego_mode}}
  local section=$3
  local value

  if [[ ${mode} == solo ]] ; then
    value=$( get_lego_setting_concrete "$1" "${section}" )
  elif [[ ${mode} == versioned ]] ; then
    value=$( get_lego_setting_concrete "$1" "${section}" "-f .gitlego" )
    if [[ -z "$value" && ${section} == submodule ]]; then
      value=$( get_lego_setting_concrete "$1" "${section}" "-f .gitmodules" )
    fi
  fi
  echo ${value}
}


get_lego_setting() {
  local section=${2:-core}
  local value=$( get_lego_setting_concrete "$1" "${section}" "-f .gitlego" )

  [[ -z "$value" && ${section} == submodule ]] && value=$( get_lego_setting_concrete "$1" "${section}" "-f .gitmodules")
  [[ -z "$value" ]] && value=$( get_lego_setting_concrete "$1" "${section}" )
#  [[ -z value ]] || value=$( get_lego_setting_concrete $1 ${section} "--local" } )
#  [[ -z value ]] && value=$( get_lego_setting_concrete $1 ${section} "--global"} )
#  [[ -z value ]] && value=$( get_lego_setting_concrete $1 ${section} "--system"} )
  echo "$value"
}


##
get_lego_setting_concrete() {
#pwd >&2
  local key="$1"
  [[ -z $key ]] && panic "$FUNCNAME() missing setting name"
  local file_option="${3---}"
  local section="${2:-core}"
  if [[ -z "${file_option##--*}" ]] && [[ ${section} == core ]] ; then
    section=lego
  fi

  if [[ $file_option == -- ]]; then
    unset file_option
  fi

  echo $(git config ${file_option} --get "${section}.$key" 2>/dev/null)
}


##
get_lego_mode() {
  local verbose=$1
  local mode=$( get_lego_setting "mode")
  local implicit=0
  local results=()
  if [[ -z "$mode" ]] ; then
    mode=$( investigate_lego_mode )
    implicit=1
  fi
  results+=("$mode")
  if [[ $verbose == 1 ]] ; then
    results+=("${implicit}")
  fi
  echo ${results[@]}
}


investigate_lego_mode() {
  local mode
  local ambiguous
  local value
  local cwRoot="${globals[$G_ROOT_DIR]}"

  pushd ${cwRoot} &> /dev/null
  if [[ -e "$cwRoot/.gitlego" ]] ; then
    mode=versioned
  fi

  if [[  -e "${cwRoot}/.gitmodules" ]] ; then

    while read module path; do
      if [[ $(get_lego_setting_concrete "${module}.branch" "submodule" "-f .gitmodules") ]]; then
        if (( $( check_ambiguous_lego_mode versioned ${mode} ) )) ; then
          mode=ambiguous
        else
          mode=versioned
        fi
        break
      fi
    done < <(git config -f .gitmodules --get-regexp "submodule.*.path" | sed -E "s/submodule\.(.*)\.path/\1/")

    while read module value; do
      if [[ $value == true ]] && [[ $(get_lego_setting_concrete "${module}.branch" "submodule" "--local") ]]; then
        if (( $( check_ambiguous_lego_mode solo ${mode} ) )) ; then
          mode=ambiguous
        else
          mode=solo
        fi
        break
      fi
    done < <(git config --get-regexp "submodule.*.active" | sed -E "s/submodule\.(.*)\.active/\1/")

  #else
  #   TODO if no .gitmodules file -> no submodule -> git-lego ambigious ??
  #
  fi

  popd > /dev/null
  echo "${mode:-empty}"
}


check_ambiguous_lego_mode() {
  local val=$1
  local prevVal=$2
  if [[ -n $prevVal ]] && [[ $val != $prevVal ]] ; then
    echo 1
  else
    echo 0
  fi
}




  ######################################################################################################################
  ############################################  MAIN SCRIPT  ###########################################################
  ######################################################################################################################


# The sed expression here replaces all backslashes by forward slashes.
# This helps our Windows users, while not bothering our Unix users.
export GITLEGO_DIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")

usage() {

  cat << EOF

    Git extension to ease work with intensive using of git submodules

    working dir: ${GITLEGO_DIR}
    usage: git lego <subcommand>

    Try 'git lego <subcommand> help' for details
EOF
}



#set -x

main() {
	if [ $# -lt 1 ]; then
		usage
		exit 1
	fi

	# load common functionality
#	. "$GITLEGO_DIR/gitlego-common"

	# This environmental variable fixes non-POSIX getopt style argument
	# parsing, effectively breaking git-lego subcommand parsing on several
	# Linux platforms.
	export POSIXLY_CORRECT=1

	# sanity checks
	local SUBCOMMAND="$1"; shift

	if [ ! -e "$GITLEGO_DIR/git-lego-$SUBCOMMAND" ]; then
		usage
		exit 1
	fi

  FLAGS_PREFIX="${0##*/} $SUBCOMMAND"
	# run command
	. "$GITLEGO_DIR/git-lego-$SUBCOMMAND"


	SUBACTION="default"

	# Particular script can figure out a specific action depends on arguments or other circumstances.
	# In this case it should define dispatch_subaction function and echo'ing required action.
	# If dispatch_subaction returns empty string - default is using
	if type "dispatch_subaction" >/dev/null 2>&1; then
		local dispatched=$(dispatch_subaction "$@")
		if [[ -n ${dispatched} ]]; then
		  SUBACTION=${dispatched}
		fi
	fi

	if ! type "cmd_$SUBACTION" >/dev/null 2>&1; then
		warn "Unknown subcommand: '$SUBACTION'"
		usage
		exit 1
	fi

  cmd_$SUBACTION "$@"
}

main "$@"
