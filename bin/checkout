#!/usr/bin/env bash
################################ LIBRARIES SHARED OVER ALL CW SCRIPTS ################################
globals=()
args=()

. $(dirname $0)/lib/shared_functions.sh

################################ STANDARD BOOTSTRAP CALL ################################
consistentwork_bootstrap

cwRoot="${globals[0]}"
cwTmpSubmodules="${globals[1]}"
gitDir="${globals[2]}"


################################ BRANCH-SPECIFIC HELP ################################
function show_help() {
cat << EOF

NAME:
    ${0##*/} tool to manage checkouts different version onto umbrella-managed git repositories

SYNOPSIS:
    ${0##*/} --[no-]current [--[no-]recursive] ...]
                [[--fallback <branch1> ...] ([--[no-]push] | [--[no-]commit] | <revision|reference-resolution>) [<path-resolution>] -- <module1> ...

DESCRIPTION:
    Checkout in umbrella mode handles slightly differ from its 'git checkout' counterpart.
    First it don\'t works with file or files after -- trigger. In umbrella it will works with
    modules\' list. In absolute convention it defines modules affecting on checkout.

    Umbrella checkout processing falling into three different modes.
    1) solo mode is just revision-resolution direct or inderect reference to specific commit,
        rather than symbolic ref aka branch.
    2) if no solo mode - relative mode, if path-resolution follows to be a path relative to current directory.
    3) if path-resolution directs to the umbrella module, it will be an absolute mode, or setting it to '/'
        or if path-resolution parameter just omitted.

    For solo mode all parameters except umbrella-specific will be used as parameters for usual 'git commit ... '
    command. For two other modes usual git checkout parameters are not permitted.

    CAUTION!
    Umbrella checkout does NOT supports --branch|--orphan functionality. It is moved to
    'branch <branch-name>' to avoid over-complicated scenarios can happening in multi-repo architecture.


EXAMPLES:
    '${0##*/} master /' -> absolute mode, --no-recursive, --current, --no-commit, --no-push
        ACTION: if umbrella module branch is different from master, it will be checked out to master,
        all sub-modules will be updated to master as well

    '${0##*/} master' -> same as above

    '${0##*/} develop .' -> relative mode, --no-recursive, --current, --commit, --push
        This action may cause (or may not) enclosed module to be dirty, if previous commit differs to develop.
        ACTION: if umbrella module branch differs from develop, it will be checked out to develop,
        all sub-modules have to be updated to develop as well. If there is any module having no develop branch,
        getting warning about this, no commit (if no --force given), state of that module is not chnanged.

    '${0##*/} --fallback=develop qa' -> absolute mode, --recursive, --current, --commit, --push
        ACTION: if umbrella module branch differs from develop, it will be checked out to develop,
        all sub-modules have to be updated to develop as well. Any of module has no develop branch,
        but has develop, will be checked out to develop.

    '${0##*/} --fallback=develop --fallback=master qa' -> same as above, but if no qa and develop exists,
        change to master

    '${0##*/} master .' -> relative mode, --no-recursive, --current, --no-commit, --no-push
        Change for current module to master branch. Get warning, if enclosing repo not referencing to master.
        All options except umbrella-specific will be passed to underlying 'git checkout ...' command.

    '${0##*/} release . --commit --push' -> solo mode, --no-recursive, --current, --push
        all predecessor modules will be updated to new state, if required. After they will be committed and
        pushed to origin.

    '${0##*/} release ./wiki' -> relative mode, change branch for first sibling wiki module to 'release', --commit

    '${0##*/} release -- wiki docs' -> absolute, looking from umbrella root, doesn\'t matter deep of module.


OPTIONS:
      --help|-h|-\?
          get this help

      --[no-]push[=<remote>]
          push (or prevent) to <remote> ('origin' by default) repository.

      --[no]-commit]
          valid with --view option only. Attempts to fix the branding modules hierarchy
          if possible. By default --sync is not performed

      --fallback[=| ]<branch>
          fallback branch name used instead of <fork-branch>, if last does not exists in sub-module

      --
          marks state after which only affected repositories will be enumerated. Actual with --[no-]current
          options only.

          ...

          to be continued

EOF
}

#echo  "${cwRoot} ${gitDir}"
pushd ${cwRoot} &>/dev/null
typeset verbose=0
typeset doAdd=0 # by default do not add
typeset branchName
typeset commit=1
typeset fallbacks=()
#set -x

################################ PARAMETERS PARSING ################################
while [[ -n $1 ]]; do
  (( $stopOptions )) && [[ -z ${1%%-*}  ]] && die "after '--' additional options ($1) are not allowed "
  noAppendArg=0
  case $1 in
    -h|-\?|--help)
      show_help
      exit
      ;;
    -v|--verbose)
      verbose=$((verbose + 1)) # Each -v argument adds 1 to verbosity.
      noAppendArg=1
      ;;

    --fallback)
      if [ -n "$2" ]; then
        noAppendArg=1
        ${fallbacks[${#fallbacks[@]}]}=$2
        shift
      else
        die "--fallback requires a non-empty option argument."
      fi
      ;;
    --fallback=?*)
      noAppendArg=1
      ${fallbacks[${#fallbacks[@]}]}=${1#*=} # Delete everything up to "=" and assign the remainder.
      ;;
    --fallback=)         # Handle the case of an empty --fallback=
      die "--fallback requires a non-empty option argument."
      ;;


    --commit)
      commit=1
      ;;
    --no-commit)
      commit=0
      ;;

    -b|-B|--orphan)
      die "$1 options is not supported for now. Create new branches using CW 'branch ...' command" >&2
      ;;
    *)
      if [[ -z ${branchName} ]]; then
        branchName=$1
        noAppendArg=1
      fi
      ;;
  esac
  ((${noAppendArg})) && args+=$1
  shift
done

#set -x

################################ SCRIP SPECIFIC METHODS ################################
function checkout_level () {
  local repoPath="$1"
  local repoBranch="$2"
  local -a modulesBefore
  local -a modulesAfter
  local -a removedModules
  local -a addedModules
#  oldIfs=IFS

  cd "${repoPath}"
  echo "---> checkout_level ${repoPath}"

  while IFS="#" read -a repo; do
    modulesBefore[${#modulesBefore[@]}]="${repo[2]}"
  done < <(git submodule status | sed -E 's/(.)([[:xdigit:]]{40})[[:space:]]+([[:graph:]]*).*/\1#\2#\3/' 2>/dev/null)
  git checkout ${branchName}
  echo $?

  while IFS="#" read -a repo; do
    modulesAfter[${#modulesAfter[@]}]="${repo[2]}"
  done < <(git submodule status | sed -E 's/(.)([[:xdigit:]]{40})[[:space:]]+([[:graph:]]*).*/\1#\2#\3/' 2>/dev/null)
#  IFS=${oldIfs}

  for b in ${modulesBefore[@]}; do
    found=0
    for a in ${modulesAfter[@]}; do
      if [[ $a == $b ]]; then
        found=1
        break
      fi
    done
    if (( ! $found )); then
      removedModules[${#removedModules[@]}]="${b}"
    fi
  done

  for a in ${modulesAfter[@]}; do
    found=0
    for b in ${modulesBefore[@]}; do
      if [[ $a == $b ]]; then
        found=1
        break
      fi
    done
    if (( ! $found )); then
      addedModules[${#addedModules[@]}]="$a"
    fi
  done

  printf "%s\n" "${addedModules[@]}"
  printf "%s\n" "${removedModules[@]}"

  doGitUpdate=0
  for modulePath in "${addedModules[@]}"; do
    git submodule update $modulePath
  done

  #By change branch can happen that submodules can't be removed (usually can) if, for example, if submodule has its own submodule.
  (( "${#removedModules[@]}" )) && git clean -d -f -f

  # do recurse call for every sub-repos
  for modulePath in "${modulesAfter[@]}"; do
    deleted=0
    for d in "${removedModules[@]}"; do
      if [[ ${d} == ${modulePath} ]]; then
        deleted=1
        break
      fi
    done
    if (( ! $deleted )); then
      echo "${cwRoot}/${modulePath}"
      checkout_level "${cwRoot}/${modulePath}"
    fi
  done
}

################################ MAIN SCRIPT LOGIC ################################

checkout_level "${cwRoot}" "${branchName}"

exit 0


[[ ${#args} ]] && echo "${args[*]}"
typeset checkoutEnvironment

if [[ -n ${branchName} ]]; then
  checkoutEnvironment="switch to \""${branchName}"\""
  [[ -n ${fallback} ]] && checkoutEnvironment+=", fallback branch \""${fallback}"\""
  [[ -z ${fallback} ]] && checkoutEnvironment+=", no fallback branch "
else
  cw_echo 'ERROR: No branch name defined.' >&2
  exit 1
fi

cd ${cwRoot}
[[ 1 == ${verbose} ]] && cw_echo "$(pwd), $checkoutEnvironment"
hasBranch=()
typeset subBranch
hasBranch[0]=$(is_branch_exists "$branchName")
#set +x

if ((! ${hasBranch[0]} )); then
  cw_echo 'ERROR: branch '$branchName' does not exists in umbrella repo.
    Create it using CW branch command: branch --help' >&2
  exit 1
fi

#checking loop
#echo ${fallback}
while read -r -a line; do
  path=${line[0]}
  cd "${cwRoot}/${path}"
  checkoutMsg=$(pwd)
  subBranch=$(is_branch_exists "$branchName")
  if [[ ${subBranch} == 1 ]]; then
    subBranch=${branchName}
  fi
  if [[ 0 == ${subBranch} && -n ${fallback} ]]; then
    subBranch=$(is_branch_exists "$fallback")
    if [[ ${subBranch} == 1 ]]; then
      subBranch=${fallback}
    fi
  fi
  hasBranch+=${subBranch}
  if [[ ${subBranch} != 0 ]]; then
    checkoutMsg+=" switch to branch $subBranch"
  else
    checkoutMsg+=" branch is not changed"
  fi
  cw_echo "$checkoutMsg"
  if [[ ${subBranch} != 0 ]]; then
    git checkout "${subBranch}"
  fi
  git clean -f -d
  if [[ 1 == ${commit} ]]; then
    git commit -am "switch to branch ${branchName}"
  fi
done < <(cat ${cwTmpSubmodules})
  echo "${hasBranch[*]}"
cd ${cwRoot}
git checkout "${args} ${branchName}"
git commit -am "switch to branch ${branchName}"


: <<EOF
while read -r -a line; do
  path=${line[0]}
  cd "${cwRoot}/${path}"
  cw_echo $(pwd)
  hasBranch=$(is_branch_exists "$branchName")
  #  git checkout "${args}"
done < <(cat ${cwTmpSubmodules})
EOF

popd &>/dev/null
