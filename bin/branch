#!/usr/bin/env bash

function show_help() {
cat << EOF

NAME:
    ${0##*/}

SYNOPSIS:
    ${0##*/} [--view] [--[no-]sync] [--[no-]push [<remote>]]
    ${0##*/} [[--fallback <branch1> ...]
                    [--[no-]push] new-branch [<fork-branch>] -- <repo>[:<fork-branch> ...
    ${0##*/}  --delete|-d|-D branch [--[no-]push [<remote>]]


DESCRIPTION:
    Creates new branch or check current branches state of modules hierarchy.
    By default new branch will be created to current and umbrella repositories only
    if affected modules have no committable changes. Repositories not matching to umbrella
    branch and having committalbe changes, will be managed to umbrella branch name explicit
    created. Options --repo=<repo1> (can be multiplied) to create branches with same
    name for <repo1>, <repo2>, ... if they are in clean state. Option --all will create
    new branch for all repositories. --fallback <branch> option defines base branch to
    be forked off. If repository does not contain fallback <branch> current branch will
    be used. Allows multiply --fallback options, first has more priority.
    Option --repo=<repo>:<repo-branch> override --fallback property and put forking
    branch to specified <repo-branch>
    <fork-branch> changes forked off branch for clean modules.

OPTIONS:
      --help|-h|-\?
          get help

      --view
          check state of the branding modules hierarchy.

      --[no]-sync]
          valid with --view option only. Attempts to fix the branding modules hierarchy
          if possible. By default --sync is not performed

      --fallback[=| ]<branch>
          if submodule already has new creating branch, it just checking to it out and

      --[no-]push[=<remote>]
          push to remote (origin by default) repository.

EOF
}

typeset doView=0
typeset doSync=1
typeset doPush=0
(( ! $# )) && doView=1; doSync=0; doPush=0

# globals is being used in consistent_bootstrap as container return important metrics of branded repo

globals=()
args=()
fallbacks=()
repos=()

while [[ -n $1 ]]; do
  case $1 in
    -h|-\?|--help)
      show_help
      exit 0
      ;;

    --fallback)
      if [ -n "$2" ]; then
        ${fallbacks[${#fallbacks[@]}]}=$2
        shift
      else
        cw_echo 'ERROR: "--fallback" requires a non-empty option argument.' >&2
        exit 1
      fi
      ;;
    --fallback=?*)
      ${fallbacks[${#fallbacks[@]}]}=${1#*=} # Delete everything up to "=" and assign the remainder.
      ;;
    --fallback=)         # Handle the case of an empty --fallback=
      cw_echo 'ERROR: "--fallback" requires a non-empty option argument.' >&2
      exit 1
      ;;

    --repo)
      if [ -n "$2" ]; then
        ${repos[${#repos[@]}]}=$2
        shift
      else
        cw_echo 'ERROR: "--repo" requires a non-empty option argument.' >&2
        exit 1
      fi
      ;;
    --repo=?*)
      ${repos[${#repos[@]}]}=${1#*=} # Delete everything up to "=" and assign the remainder.
      ;;
    --repo=)         # Handle the case of an empty --repo=
      cw_echo 'ERROR: "--repo" requires a non-empty option argument.' >&2
      exit 1
      ;;

    --push)
      doPush=1
      ;;
    --no-push)
      doPush=0
      ;;

    --sync)
      doSync=1
      doView=1
      ;;
    --no-sync)
      doSync=0
      ;;

    --view)
      doView=1
      ;;

    -d|-D|--delete)
      doDelete=1
      ;;

    *)
      if [[ -z ${branchName} ]]; then
        branchName="$1"
      elif [[ -z ${forkName} ]]; then
        forkName="$1"
      fi
      ;;
  esac
  shift
done

. $(dirname $0)/lib/shared_functions.sh

consistentwork_bootstrap

cwRoot="${globals[0]}"
cwTmpSubmodules="${globals[1]}"
gitDir="${globals[2]}"

if (( "$doView" )); then
  printf "do view"
  (( $doSync )) && printf ", do sync"
  (( ! $doSync )) && printf ", NO sync"
  (( $doPush )) && printf ", do push"
  (( ! $doPush )) && printf ", NO push"
  printf "\n"

  if (( $doSync )); then

  fi
  exit 0
fi

