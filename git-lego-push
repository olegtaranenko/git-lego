#!/usr/bin/env bash
set +o posix
################################ LIBRARIES SHARED OVER ALL CW SCRIPTS ################################
  #
  ## Exit code of the script
  ## 0 - success
  ## 1 - un-success (bad options/... etc)
  ## 2 - unexpected error (wrong code)
  #
declare ret=0

################################ STANDARD BOOTSTRAP CALL ################################
umbrella_bootstrap


################################ BRANCH-SPECIFIC HELP ################################
function show_help() {
cat << EOF

NAME:
    ${FLAGS_PREFIX} status in git umbrella-managed modules

SYNOPSIS:
    '${FLAGS_PREFIX} [<any-git-status-options>] [-v|--verbose] [<path-resolution>] -- [[<module-name>] ...]'

DESCRIPTION:


EXAMPLES:
    '${FLAGS_PREFIX} -v .' -> show verbose status for current module only


OPTIONS:
      --help|-h|-\?
          get this help

      --
          marks state after which repositories will be shown in status.


EOF
}

typeset args=()
typeset verbose=0
typeset doRecursive=1
typeset doForce=0

typeset initialPath
typeset modulePath
typeset moduleName
typeset moduleFilePath
typeset moduleInitialized
typeset moduleGitDir

typeset initialPath
typeset afterDash=()
typeset stopOptions=0
typeset fetchBefore=0
typeset tagOptionGiven=0
typeset remoteParam branchParam

typeset doFixDangled=0
typeset dangledBranch="__detached__"
typeset dangledModules=()
typeset dangledRefs=()
typeset tagsModules=()
typeset noUpstreamModules=()
typeset noUpstreamBranches=()
typeset legoRemote="${globals[$G_LEGO_REMOTE]}"
################################ PARAMETERS PARSING ################################
while [[ -n $1 ]]; do
  (( $stopOptions )) && [[ -z ${1%%-*}  ]] && die "after '--' additional options ($1) are not allowed "
  case $1 in
    -h|-\?|--help)
      show_help
      exit
      ;;
    -v|--verbose)
      verbose=$((verbose + 1)) # Each -v argument adds 1 to verbosity.
      ;;

    --recursive|-r)
      doRecursive=1
      ;;
    --no-recursive|-R)
      doRecursive=0
      ;;

    --force|-f)
      doForce=1
#      args+=("$1")
      ;;
    --no-force)
      doForce=0
      ;;

    --fetch)
      fetchBefore=1
      ;;
    --no-fetch)
      fetchBefore=0
      ;;

    --tags|--mirror)
      doRecursive=1
      doForce=1
#      args+=("$1")
      if [[ "$1" == "--tags" ]]; then
        tagOptionGiven=1
      fi
      ;;

    --fix-dangled|-d)
      doFixDangled=1
      ;;
    --no-fix-dangled|-D)
      doFixDangled=0
      ;;
    --fix-dangled=*)
      dangledBranch="${1#*=}"
# TODO check if branch name, given in parameters for fix dangled commits does not exists
      ;;

    --)
      stopOptions=1
      ;;
    *)
      if (( $stopOptions )); then
        if [[ -z ${1%%-*} ]]; then
          die "after '--' additional options ($1) are not allowed "
        else
          afterDash+=($1)
        fi
      elif [[ -z ${1%%-*} ]]; then
        args+=("$1")
      elif [[ -z "$initialPath" ]]; then
        initialPath="$1"
      elif [[ -z "$remoteParam" ]]; then
        remoteParam="$1"
      elif [[ -z "$branchParam" ]]; then
        branchParam="$1"
      else
        die "unknown parameter: '$1'"
      fi
      ;;
  esac
  shift
done

if [[ -n "$remoteParam" || -n "$branchParam" ]]; then
  die "Parameters possible remote and/or branch not supported by git-lego"
fi

echo "args: ${args[@]}"
#set +x


################################ SCRIPT SPECIFIC METHODS ################################
#
# Returns
#     0 - module not requires push or pushable and listed as affected
#     1 - module is pushable, but not listed as affected
#     2 - module is not pushable (requires pull/fetch/merge) or detached
#

function prepare_push_level() {
#echo "$FUNCNAME() $@" >&2; pwd >&2

  local levelPath="$1"
  [[ -z "$levelPath" ]] && panic "$FUNCNAME()... parameter 'path' is required"
  local moduleName="$2"
  local modulePath="$3"
  local ret=0
  local childRet # child modules return code

  if (( "$fetchBefore" )); then
    cw_verbose "About to fetch from remote..."
    if (( "$verbose" )); then
      git fetch
    else
      git fetch &> /dev/null
    fi
    (( $? )) && panic "Something wrong with git fetch"
  fi

  module_porcelain_status "$modulePath" "push"

  local notApplied=1

  local moduleRefname="${MODULE_STATUS[$MS_MODULE_REFNAME]}"
  local detached="${MODULE_STATUS[$MS_DETACHED]}"
  
  local managedRefname="${MODULE_STATUS[$MS_MANAGED_REFNAME]}"
  local managedReftype="${MODULE_STATUS[$MS_MANAGED_REFTYPE]}"
  local upstream="${MODULE_STATUS[$MS_UPSTREAM]}"
  local upstreamAhead="${MODULE_STATUS[$MS_UPSTREAM_AHEAD]}"
  local detachedFrom="${MODULE_STATUS[$MS_DETACHED_FROM]}"

  if [[ -z "$upstream" && "$detached" == 0 ]]; then
    noUpstreamModules+=("$moduleName")
    noUpstreamBranches+=("$moduleRefname")

  elif [[ "$upstreamAhead" > 0  && ("$detached" == 0  || "$doForce" == 1 ) ]]; then
    if [[ -n "$detachedFrom" && "$detached" > 0 && "$managedReftype" == 1 ]]; then
      local tagName="${managedRefname#refs/}"
      tagName="${tagName#tags/}"

      dangledModules+=("$moduleName")
      dangledRefs+=("$tagName")
      tagsModules+=("$moduleName")

      noUpstreamModules+=("$moduleName")
      noUpstreamBranches+=("$dangledBranch")

      git checkout -B "$dangledBranch"
      ret=$?
      (( ! "$ret" )) && ( git tag -f "$tagName" ; ret=$? )
    fi
    if (( ! "$ret" )); then
      drop_to_affected "$levelPath"
      notApplied=$?
    fi
  fi

  if (( ! "$notApplied" )); then
    skippedModules+=("$moduleName")
  fi

  if [ -f .gitmodules ] && (( "$doRecursive" )); then
    while read -a module; do
      childRet=0
      subModuleName="${module[0]}"
      localPath="${module[1]}"
      subRepoPath="$levelPath/$localPath"

      subModulePath="$modulePath"
      [[ "${subModulePath:(-1)}" != "/" ]] && subModulePath+="/"
      subModulePath+="$subModuleName"

      pushd "$subRepoPath" &>/dev/null
      prepare_push_level "$subRepoPath" "$subModuleName" "$subModulePath"
      childRet=$?

      (( "$childRet" > "$ret" )) && ret="$childRet"
      popd  &>/dev/null
    done < <(git config -f .gitmodules --get-regexp "submodule.*.path" | sed -E "s/submodule\.(.*)\.path/\1/")
  fi

  return "$ret"
}


################################ MAIN SCRIPT LOGIC ################################
cmd_default() {
  typeset skippedModules=()
#  typeset affected=0
  local ret=0
  local index

#  set -x
  pushd "$moduleFilePath" &>/dev/null
  prepare_push_level "$moduleFilePath" "$moduleName" "$modulePath"
  ret=$?
  
  local wasPushed=()
  if (( ! $ret )) ; then
    while read -a module; do
      local moreOptions=()

      moduleName="${module[$MFS_MODULE_NAME]}"

      cd "${module[$MFS_FULL_PATH]}"
      level_verbose_about_to "${module[@]}"

      index=0
      for noUpstreamModule in "${noUpstreamModules[@]}"; do
        if [[ "$noUpstreamModule" == "$moduleName" ]]; then
          moreOptions+=("$legoRemote")
          branch="${noUpstreamBranches[$index]}"
          moreOptions+=("$branch")
          break
        fi
        index=$(( "$index" + 1 ))
      done

#      if [[ "${#tagsModules[@]}" && "$tagOptionGiven" == 0 ]]; then
#        unset tagsOption
#        for tagsModule in "${tagsModules[@]}"; do
#          if [[ "$tagsModule" == "$moduleName" ]]; then
#            tagsOption="--tags"
#            break
#          fi
#        done
#      fi

#      echo "git push ${args[@]} ${moreOptions[@]}"

      git push ${args[@]} ${moreOptions[@]}
      ret=$?

      if (( "$ret" )); then
        pwd >&2
        panic "'git push ${args[@]} ${moreOptions[@]}' failed"
      else
        wasPushed+=("${module[$MFS_MODULE_NAME]}")
        local tagsArePushed=0
        if (( "${#dangledModules[@]}" )) ; then
          index=0
          for dangledModule in "${dangledModules[@]}"; do
            if [[ "$dangledModule" == "$moduleName" ]]; then
              local tagName="${dangledRefs[$index]}"
              git checkout "$tagName"
              git push "$legoRemote" ":$tagName"
              git push "$legoRemote" --tags
              git branch -D "$dangledBranch"
              git push "$legoRemote" ":$dangledBranch"
              tagsArePushed=1
              break
            fi
            index=$(( "$index" + 1 ))
          done
        fi
        if (( ! "$tagsArePushed" )) && (( "$tagOptionGiven" )); then
          git push "$legoRemote" --tags
        fi

      fi
    done < <(cat ${globals[$G_AFFECTED_MODULES]}  | (tac 2>/dev/null || tail -r))
  else
    mainWarn="Request to push is rejected. "
    (( "$verbose" )) && mainWarn+="Use '${FLAGS_PREFIX} -v' to figure out the reason."
    (( 1 == "$verbose" )) && mainWarn+="'${FLAGS_PREFIX} -v -v' to get more detailed information."

    cw_echo  "$mainWarn" \
    "Some mutual dependent repositories will not be pushed, but required." \
    "Pushing at current state will break consistence of modules hierarchy."
  fi

  if (( ! "${#wasPushed[@]}" )); then
    cw_echo "No modules was pushed"
  elif (( "${#skippedModules[@]}" )); then
    cw_echo "Not affected modules: ${skippedModules[*]}"
  fi

  popd &>/dev/null
  umbrella_finalize
  exit "$ret"
}