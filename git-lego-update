#!/usr/bin/env bash
set +o posix

########### TODO Subject to remove in favour of checkout #################

################################ STANDARD BOOTSTRAP CALL ################################
umbrella_bootstrap


################################ BRANCH-SPECIFIC HELP ################################
function show_help() {
cat << EOF

NAME:
    ${FLAGS_PREFIX} status in git umbrella-managed modules

SYNOPSIS:
    '${FLAGS_PREFIX} [options] [-v|--verbose]'
    '${FLAGS_PREFIX} [--local|--global|--system] --lego-mode[[=| [versioned|solo] [--force|-f]' # view or set lego mode

DESCRIPTION:

EXAMPLES:
    '${FLAGS_PREFIX} -v .' -> show verbose status for current module only


OPTIONS:
      --help|-h|-\?
          get this help

EOF
}

typeset verbose=0
typeset initialPath updateMessage updateTemplate doRecursive=1  doForce=1

################################ PARAMETERS PARSING ################################
while [[ -n $1 ]]; do
  noAppendArg=0
  case $1 in
    -h|-\?|--help)
      show_help
      exit
      ;;
    -v|--verbose)
      verbose=$((verbose + 1)) # Each -v argument adds 1 to verbosity.
      ;;

    --recursive|-r)
      doRecursive=1
      ;;
    --no-recursive|-R)
      doRecursive=0
      ;;

    --force|-f)
      doForce=1
      ;;
    --no-force)
      doForce=0
      ;;

    *)
      if [[ -z ${1%%-*} ]]; then
        args+=($1)
      elif [[ -z ${initialPath} ]]; then
        initialPath=$1
      else
        die "error in parameters [$1]"
      fi
      ;;
  esac
  shift
done
#set +x


################################ SCRIPT SPECIFIC METHODS ################################

################################ MAIN SCRIPT LOGIC ################################
#
# callback to detect what command should be called
#
#dispatch_subaction() {
#  echo update
#}

cmd_default() {
  typeset modulePath=$(resolve_module_path "${initialPath}" ".")
  read moduleName moduleFilePath localPath < <(module_info "${modulePath}" "name" "path" "relative")

  typeset affected=0
  typeset onEmptyMessage
  typeset skippedModules=()
#  [[ -z ${updateMessage} ]] && onEmptyMessage="update for umbrella ${globals[$G_ROOT_NAME]}, affected modules: "

  pushd "$moduleFilePath" &>/dev/null
  update_level "$moduleFilePath" "$moduleName" "$modulePath" "$localPath"

  popd &>/dev/null
  umbrella_finalize
}