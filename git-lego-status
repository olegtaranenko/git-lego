#!/usr/bin/env bash

set +o posix

################################ LIBRARIES SHARED OVER ALL CW SCRIPTS ################################
  #
  ## Exit code of the script
  ## 0 - success
  ## 1 - un-success (bad options/... etc)
  ## 2 - unexpected error (wrong code)
  #

declare ret=0

args=()

################################ STANDARD BOOTSTRAP CALL ################################
umbrella_bootstrap

cwRoot="${globals[$G_ROOT_DIR]}"
gitDir="${globals[$G_MODULE_GIT_DIR]}"


################################ SCRIPT-SPECIFIC HELP ################################
function show_help() {
cat << EOF

NAME:
    ${FLAGS_PREFIX} status in git lego-managed modules

SYNOPSIS:
    '${FLAGS_PREFIX} [<any-git-status-options>] [-v|--verbose] [<path-resolution>] -- [[<module-name>] ...]'

DESCRIPTION:


EXAMPLES:
    '${FLAGS_PREFIX} -v .' -> show verbose status for current module only


OPTIONS:
      --help|-h|-\?
          get this help

      --
          marks state after which repositories will be shown in status.


EOF
}

typeset verbose=0
typeset initialPath
typeset afterDash=()
typeset stopOptions=0
#set -x
################################ PARAMETERS PARSING ################################
while [[ -n $1 ]]; do
  (( $stopOptions )) && [[ -z ${1%%-*}  ]] && die "after '--' additional options ($1) are not allowed "
  case $1 in
    -h|-\?|--help)
      show_help
      exit
      ;;
    -v|--verbose)
      verbose=$((verbose + 1)) # Each -v argument adds 1 to verbosity.
      ;;

    --)
      stopOptions=1
      ;;
    *)
      if (( $stopOptions )); then
        if [[ -z ${1%%-*} ]]; then
          die "after '--' additional options ($1) are not allowed "
        else
          afterDash+=($1)
        fi
      elif [[ -z ${1%%-*} ]]; then
        args+=($1)
      elif [[ -z ${initialPath} ]]; then
        initialPath="$1"
      else
        die "error in parameters [$1]"
      fi
      ;;
  esac
  shift
done

#echo "args: ${args}"
#set +x


################################ SCRIPT SPECIFIC METHODS ################################

#
## Print status in format
# ... (tbd)
## Parameters
#   $1 file path to module toplevel
#   $2 path to the enclosed module in module hierarchy
#   $3 module name
#
##  Globals settings.
#     $quiet ??
#
##  Side effects to globals.
#     $commitable - sets to 1, if one of affected module has dirty state, required to be commit
# .
#
typeset info

function show_current_module_status {
#"${subRepoPath}" "${subModule}" "${modulePath}" "${initialized}" "${stickOnBranch:--}"
  local filePath="$1"
  info="${3}"                  # starting with module path
  local initialized="${4:-1}"
  local stickOnBranch="$5"

  local verboseMsg=([1]="path: $filePath")
  verboseMsg+=("url: "$(get_repo_url))

  if (( $verbose )); then
    cw_cr
  fi

  local verboseIssues infoIssues
#  set -x

  # gather all additional fine information into $MODULE_STATUS global array
  module_porcelain_status status ${info} "${initialized}" "${stickOnBranch}"

  # two below vars are defined to cmd_default()
  (( ${MODULE_STATUS[$MS_DETACHED]} )) && detached=${MODULE_STATUS[$MS_DETACHED]}
  (( ${MODULE_STATUS[$MS_COMMITABLE]} )) && commitable=${MODULE_STATUS[$MS_COMMITABLE]}

  typeset branchInfo=${MODULE_STATUS[$MS_BRANCH_INFO]}
  [[ -n ${branchInfo} ]] && info+=", ${branchInfo}"

  if (( ${MODULE_STATUS[$MS_UNTRACKED]} )); then
    (( ${#verboseIssues} )) && verboseIssues+=", "
    verboseIssues+="untracked"
    infoIssues+="?"
  fi
  if (( ${MODULE_STATUS[$MS_ADDED]} )); then
    (( ${#verboseIssues} )) && verboseIssues+=", "
    verboseIssues+="added"
    infoIssues+="A"
  fi
  if (( ${MODULE_STATUS[$MS_MODIFIED]} )); then
    (( ${#verboseIssues} )) && verboseIssues+=", "
    verboseIssues+="modified"
    infoIssues+="M"
  fi
  if (( ${MODULE_STATUS[$MS_DELETED]} )); then
    (( ${#verboseIssues} )) && verboseIssues+=", "
    verboseIssues+="deleted"
    infoIssues+="D"
  fi
  if (( ${MODULE_STATUS[$MS_RENAMED]} )); then
    (( ${#verboseIssues} )) && verboseIssues+=", "
    verboseIssues+="renamed"
    infoIssues+="R"
  fi
  if (( ${MODULE_STATUS[$MS_COPIED]} )); then
    (( ${#verboseIssues} )) && verboseIssues+=", "
    verboseIssues+="copied"
    infoIssues+="C"
  fi
  if (( ${MODULE_STATUS[$MS_UNMERGED]} )); then
    (( ${#verboseIssues} )) && verboseIssues+=", "
    verboseIssues+="unmerged"
    infoIssues+="U"
  fi

#  set -x
  if [[ ${MODULE_STATUS[$MS_UNINITIALIZED]} == 1 ]]; then
    info+=", not initialized"
    verboseMsg+=("The module not initialized yet. 'git-lego init --reconcile' to fix it.")
    print_if_expected
  else
    if (( ${#infoIssues} )) ; then
      verboseIssues="issues: "$verboseIssues" paths"
      verboseMsg+=("${verboseIssues}")
      info+=", dirty: "${infoIssues}
    else
      if [[ ${MODULE_STATUS[$MS_DETACHED]} == 1 ]] ; then
        info+=", detached"
        verboseMsg+=("You need to run either 'git-lego checkout <branch-name>' or 'git-lego init [--reconcile|--pin]' to make those consent.")
      fi
      if [[ ${MODULE_STATUS[$MS_INCONSISTENT]} == 1 ]] ; then
        info+=", not consistent"
        verboseMsg+=("Module has discrepancy between its current state and revision, which outer module expected")
      fi
      print_if_expected ${MODULE_STATUS[$MS_INCONSISTENT]}
      if [[ -n ${MODULE_STATUS[$MS_GUESSED_BRANCHES]} ]] ; then
        info+=", possible: ${MODULE_STATUS[$MS_GUESSED_BRANCHES]}"
#        verboseMsg+=("Module has discrepancy between its current state and revision, which outer module expected")
      fi
      if (( ${MODULE_STATUS[$MS_INCONSISTENT]} )) ; then
        info+=")"
      fi
    fi
  fi
  verboseMsg[0]=${info}
#  set +x
  cw_echo "${verboseMsg[@]}"

  if (( $verbose > 1 )) && [ -n ${args} ]; then
    git status ${args}
  fi
}

print_if_expected() {
  if (( $1 )) ; then
    info+=" ("
  else
    if [[ -n ${MODULE_STATUS[$MS_INNER_REV_HINT]} ]]; then
      info+=", "
    fi
  fi
  info+="expected:${MODULE_STATUS[$MS_INNER_REV_HINT]:-no hint}"
  if [[ -n ${MODULE_STATUS[$MS_INNER_REV_HINT]} ]]; then
    verboseMsg+=("Expected, that module should be initialized to ${MODULE_STATUS[$MS_INNER_REV_HINT]} revision")
  fi
}

function status_level() {
  local levelPath="$1"
  [[ -z ${levelPath} ]] && panic "$FUNCNAME()... parameter 'path' is required"
  local repoBranch
  local ret=0   # return code, 0 - the repo is syncronized
  local childRet=${asdf} # child return code
  local stickOnBranch=${5:--}

#  set -x
  drop_to_affected ${levelPath}

  (( ! $? )) && show_current_module_status "$@"
#  set +x

  if [ -f .gitmodules ]; then
    while read -a module; do
      childRet=0
      subModule="${module[0]}"
      stickOnBranch=$(git config --file .gitmodules --get submodule."${subModule}".branch)
      localPath="${module[1]}"
      subRepoPath="${levelPath}"/"${localPath}"
      initialized=$(is_repo_initialized ${subRepoPath})

      pushd "${subRepoPath}" &> /dev/null
#      break
      local modulePath="$3" #/$subModule"
      if [[ ${modulePath:(-1)} != "/" ]]; then
        modulePath+="/"
      fi
      modulePath+="$subModule"

      status_level "${subRepoPath}" "${subModule}" "${modulePath}" "${initialized}" "${stickOnBranch}"
      childRet=$?
      if [[ ${childRet} > ${ret} ]] ; then
        ret=${childRet}
      fi
      popd  &> /dev/null
    done < <(git config -f .gitmodules --get-regexp "submodule.*.path" | sed -E "s/submodule\.(.*)\.path/\1/")
  fi
  return $ret
}



################################ MAIN SCRIPT LOGIC ################################
cmd_default() {

  # 'cumulative variables, if any of module hits.
  local commitable
  local detached

#  set -x
  local modulePath=$(resolve_module_path "${initialPath}" /)
  read moduleName path < <(module_info "${modulePath}" "name" "path")

  pushd ${path} &>/dev/null
  #baseModulePath=$(_m_pmd)
  status_level "${path}" "${moduleName}" "${modulePath}"
#  set +x
  ret=$?

  if (( $commitable )); then
    msg="You have to COMMIT current changes ('git-lego commit --help' for more information)"
    if (( $detached )); then
      msg2+="One (or more) module(s) DETACHED ('git-lego branch --help' for more information)"
  #    msg2="Your are advised to run CW 'branch ... <branch-name>' command before doing commit"
    fi
    msg+="."
    cw_cr
    cw_echo "${msg}"
    [[ -n ${msg2} ]] && cw_echo "${msg2}"
    (( ! $verbose )) && cw_echo "${FLAGS_PREFIX} -v ... option to get output more verbose or ${FLAGS_PREFIX} --help for other options"
    cw_cr
  fi

  popd &>/dev/null

  umbrella_finalize
  exit ${ret}
}
